规则四
=============

在前面的课程里，我们设计了一个能够适应多种不同环境，并且完成任务的程序。（我们还有可能会遇到其它的、使该程序不能完成任务的环境……但是我们已经做了足够多的练习。）（在忘记之前，）我们来回顾一下：我们写的程序是让乐跑探索它所在的世界，并且绕世界一周。由于非常短，这个程序的结构很清晰。但是对于第一次看到的人来说，它的结构可能还不是那么明显。因此，我们可以添加一些注释，或者使用一些更有意义的名字，或者二者都采用。让我们从添加注释开始——比所需要的再啰嗦一些：

.. code-block:: python

    # 让乐跑放下一个笑脸以标记起点
    put()

    # 让乐跑找一个没有障碍物的方向，然后开始前进
    while not front_is_clear():
        turn_left()
    move()

    ''' 当乐跑回到有笑脸的位置时，就知道自己已经绕世界一周了。''''

    while not object_here():
        if right_is_clear():    # 保持靠右
            turn_right()
            move()
        elif front_is_clear():  # 前进——沿着右侧的墙
            move()
        else:
            turn_left() # 沿着墙左转

尽管这些注释表明了每条指令的意图，但是对于阐明解决问题的方法（或者叫 *算法* ）并没有什么帮助。因此，这些注释对于另外一个程序员来说，可能没有我们想象的那样有帮助。通过阅读注释，我们注意到该程序包含两个部分：

#. 标记起始点；
#. 沿着右侧墙前进，直到回到起点。

让我们重写一下前面的程序，使这两个部分更清晰，并且用不同的方式来做注释：

.. code-block:: python

    ''' 这段程序让乐跑逆时针绕世界一周，当再次回到起点时结束。 '''

    def mark_starting_point_and_move():
        put()
        while not front_is_clear():
            turn_left()
        move()

    def follow_right_wall():
        if right_is_clear():
            turn_right()
            move()
        elif front_is_clear():
            move()
        else:
            turn_left()

    #######
    ##  上面为定义；程序从下面开始执行。
    #######

    mark_starting_point_and_move()

    while not object_here():
        follow_right_wall()

是不是更清楚了？

**提示：你可以把** ``follow_right_wall()`` **复制到库里，这样就可以在任何需要的时候使用了。**

总结
----------

我们设法写一个能够解决多种不同问题的程序，从解决一个简单的问题（如何绕一个矩形的世界一周）开始，然后一点一点的改进（也叫 *逐步改进* ）。在每一步，我们坚持只改动一小部分、确保其能正确工作，然后再思考更复杂的问题。在 *算法* 的每个部分，我们也使用了更具描述性的名称来让程序更容易阅读和理解（希望如此）。因此，在你自己写程序的时候，应该使用如下的策略：

.. index:: 规则四

.. important::

    **规则四**
        写程序的步骤：

        #. 从简单的问题开始；
        #. 每次只引入一个小的改动；
        #. 确保引入的改动没有影响之前的工作成果；
        #. 添加描述性的注释而不是简单的复述每条指令；并且
        #. 选择更具描述性的名称。

后面的两条实际上和规则二相同。

现在，请确保你的程序能正确工作，然后再开始下一节。

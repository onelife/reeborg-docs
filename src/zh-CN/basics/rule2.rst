规则二
=============

.. index:: 规则二

我前面提到了学习编程的第一条规则：你必须动手写程序（和测试），而不仅仅是简单的阅读怎样编程。现在，我要告诉你第二条原则——一个写好计算机程序的秘密。

.. important::

    **规则二**

        把你的程序写得让 **人** 容易阅读和理解。 

就是这样，要把你的计算机程序写得让别人（和你一样的人）能够容易的、独立的看懂，并且知道它在干什么。计算机语言就是被设计成让你可以和计算机进行交流的工具，就像人类的语言发展为人与人交流的工具一样。但是，计算机语言和人类的语言相比，非常简单，并且经常被程序员们用来分享工作成果。

.. index:: #, 注释, " " " （三个）, ' ' ' （三个）

注释
--------

我要介绍给你的第一个工具，可以用来让人们更好的理解你的计算机程序： *注释* 。

注释，是程序员们记的笔记，会被计算机忽略掉；是给人类阅读和理解用的。

当使用 Python 时，你可以用下面的两种方法来记笔记：

-  把任意数量的文字放在一对由三个引号组成的标记里，比如 ``""" ... """`` 或 ``''' ... '''`` 。
-  在任意一行，把文字放在 ``#`` 符号后面。

我先展示一个简单的、没有任何注释的程序，接着展示第二个有注释的版本。在这两个版本的程序里都有同样一个错误。你能够更容易地在第一个版本里指出这个错误，还是第二个？

.. code-block:: python

    move()
    move()
    turn_left()
    put()
    move()
    move()
    turn_left()
    put()
    move()
    turn_left()
    put()
    move()
    move()
    turn_left()
    put()

和上面的版本相比，接下来的版本在乐跑的眼里根本没有任何不同，但是却增加了给人看的注释。你应该可以很容易的辨认出注释，因为其颜色和字体都有所不同。

.. code-block:: python

    '''  在这个简单的程序里，乐跑沿着一个方形的路线行走，
    并且在方形的四个角各留下一个东西。 '''

    move()  # Python 的单行注释
    move()
    turn_left() # 乐跑只会左转
    put()   # 我们假设乐跑带了足够多的东西

    # 重复上面的步骤三次以完成任务
    move()
    move()
    turn_left()
    put()

    move()
    turn_left()
    put()

    move()
    move()
    turn_left()
    put()

前面看到的例子在实践中并不算是好的注释，但至少有一条能帮你找到程序中的错误。你可能觉得这么做是作弊，然而光凭代码你怎么能猜出其背后的意图？在注释中解释这段代码应该做什么，对排查错误非常有帮助。

请注意，除了注释，我还用空行隔开了代码中的各个“逻辑”部分，以便帮助你更容易的发现其中的模式。一起使用注释和空行可以大幅提高程序的可读性。


.. admonition:: 写给教育工作者的内容

    如果你已经介绍了怎样使用函数的参数，那么我建议你在上一节的例程中把

    .. code-block:: python
    
        put()

    替换为

    .. code-block:: python
    
        put('token')

    理由是，这样做可以让第一次阅读该程序的人更容易理解。
